// Copyright (c) 2014-2016 The btcsuite developers
// Copyright (c) 2020 The Blocknet developers
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

package chaincfg

import (
	"time"

	"github.com/btcsuite/btcd/chaincfg/chainhash"
	"github.com/btcsuite/btcd/wire"
)

// genesisCoinbaseTx is the coinbase transaction for the genesis blocks for
// the main network
var genesisCoinbaseTx = wire.MsgTx{
	Version: 1,
	TxIn: []*wire.TxIn{
		{
			PreviousOutPoint: wire.OutPoint{
				Hash:  chainhash.Hash{},
				Index: 0xffffffff,
			},
			SignatureScript: []byte{
				0x04, 0xff, 0xff, 0x00, 0x1d, 0x01, 0x04, 0x35,
				0x64, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
				0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x63, 0x6f,
				0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x20,
				0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x64, 0x65,
				0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x20,
				0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
				0x75, 0x74, 0x75, 0x72, 0x65,
			},
			Sequence: 0xffffffff,
		},
	},
	TxOut: []*wire.TxOut{
		{
			Value: 0xee6b280,
			PkScript: []byte{
				0x41, 0x04, 0x52, 0xc9, 0x1a, 0x00, 0x51, 0x8f,
				0xb8, 0xc6, 0xd3, 0x81, 0x00, 0x34, 0x1f, 0x88,
				0x49, 0x95, 0x54, 0x28, 0x4d, 0x1b, 0xa7, 0x50,
				0x97, 0xcc, 0x25, 0xae, 0x5a, 0x0d, 0x81, 0x18,
				0x35, 0xc6, 0x3d, 0x2c, 0xb4, 0x6c, 0x88, 0x55,
				0x30, 0x4b, 0xca, 0x81, 0xc4, 0x52, 0xb6, 0x3c,
				0xe7, 0x1f, 0xcb, 0x68, 0x97, 0xd0, 0x6f, 0x80,
				0x00, 0x45, 0x08, 0x41, 0xf7, 0x26, 0x02, 0x45,
				0x7f, 0x74, 0xac,
			},
		},
	},
	LockTime: 0,
}
var genesisCoinbaseTxTestnet = wire.MsgTx{
	Version: 1,
	TxIn: []*wire.TxIn{
		{
			PreviousOutPoint: wire.OutPoint{
				Hash:  chainhash.Hash{},
				Index: 0xffffffff,
			},
			SignatureScript: []byte{
				0x04, 0xff, 0xff, 0x00, 0x1d, 0x01, 0x04, 0x35,
				0x64, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
				0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x63, 0x6f,
				0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x20,
				0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x64, 0x65,
				0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x20,
				0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
				0x75, 0x74, 0x75, 0x72, 0x65,
			},
			Sequence: 0xffffffff,
		},
	},
	TxOut: []*wire.TxOut{
		{
			Value: 0xee6b280,
			PkScript: []byte{
				0x41, 0x04, 0x52, 0xc9, 0x1a, 0x00, 0x51, 0x8f, 0xb8,
				0xc6, 0xd3, 0x81, 0x00, 0x34, 0x1f, 0x88, 0x49, 0x95,
				0x54, 0x28, 0x4d, 0x1b, 0xa7, 0x50, 0x97, 0xcc, 0x25,
				0xae, 0x5a, 0x0d, 0x81, 0x18, 0x35, 0xc6, 0x3d, 0x2c,
				0xb4, 0x6c, 0x88, 0x55, 0x30, 0x4b, 0xca, 0x81, 0xc4,
				0x52, 0xb6, 0x3c, 0xe7, 0x1f, 0xcb, 0x68, 0x97, 0xd0,
				0x6f, 0x80, 0x00, 0x45, 0x08, 0x41, 0xf7, 0x26, 0x02,
				0x45, 0x7f, 0x74, 0xac,
			},
		},
	},
	LockTime: 0,
}
var genesisCoinbaseTxRegtest = wire.MsgTx{
	Version: 1,
	TxIn: []*wire.TxIn{
		{
			PreviousOutPoint: wire.OutPoint{
				Hash:  chainhash.Hash{},
				Index: 0xffffffff,
			},
			SignatureScript: []byte{
				0x04, 0xff, 0xff, 0x00, 0x1d, 0x01, 0x04, 0x35,
				0x64, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
				0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x63, 0x6f,
				0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x20,
				0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x64, 0x65,
				0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x20,
				0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
				0x75, 0x74, 0x75, 0x72, 0x65,
			},
			Sequence: 0xffffffff,
		},
	},
	TxOut: []*wire.TxOut{
		{
			Value: 0x2faf080,
			PkScript: []byte{
				0x41, 0x04, 0x52, 0xc9, 0x1a, 0x00, 0x51, 0x8f, 0xb8,
				0xc6, 0xd3, 0x81, 0x00, 0x34, 0x1f, 0x88, 0x49, 0x95,
				0x54, 0x28, 0x4d, 0x1b, 0xa7, 0x50, 0x97, 0xcc, 0x25,
				0xae, 0x5a, 0x0d, 0x81, 0x18, 0x35, 0xc6, 0x3d, 0x2c,
				0xb4, 0x6c, 0x88, 0x55, 0x30, 0x4b, 0xca, 0x81, 0xc4,
				0x52, 0xb6, 0x3c, 0xe7, 0x1f, 0xcb, 0x68, 0x97, 0xd0,
				0x6f, 0x80, 0x00, 0x45, 0x08, 0x41, 0xf7, 0x26, 0x02,
				0x45, 0x7f, 0x74, 0xac,
			},
		},
	},
	LockTime: 0,
}

// genesisHash is the hash of the first block in the block chain for the main
// network (genesis block).
var genesisHash = chainhash.Hash([chainhash.HashSize]byte{ // Make go vet happy.
	0xb8, 0xb7, 0x4a, 0xd8, 0x0f, 0x9a, 0x3b, 0x57,
	0x06, 0x8f, 0xc2, 0x11, 0x08, 0xbf, 0x6e, 0x4e,
	0x66, 0x51, 0x56, 0x90, 0x90, 0xdc, 0x07, 0x5a,
	0xda, 0x02, 0x91, 0x91, 0xb7, 0x0e, 0x00, 0x00,
})

// genesisMerkleRoot is the hash of the first transaction in the genesis block
// for the main network.
var genesisMerkleRoot = chainhash.Hash([chainhash.HashSize]byte{ // Make go vet happy.
	0xf2, 0x6b, 0xb5, 0xa8, 0x60, 0x6c, 0xa0, 0x26,
	0xd9, 0xc1, 0x7f, 0x12, 0xb6, 0xe2, 0x15, 0x81,
	0x2b, 0xbe, 0x33, 0xab, 0x19, 0x07, 0x3a, 0xc2,
	0xf4, 0x5a, 0xf5, 0x6d, 0x3f, 0xe9, 0xf0, 0xb1,
})

// genesisBlock defines the genesis block of the block chain which serves as the
// public transaction ledger for the main network.
var genesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    1,
		PrevBlock:  chainhash.Hash{},         // 0000000000000000000000000000000000000000000000000000000000000000
		MerkleRoot: genesisMerkleRoot,        // b1f0e93f6df55af4c23a0719ab33be2b8115e2b6127fc1d926a06c60a8b56bf2
		Timestamp:  time.Unix(0x5989f7b9, 0), // Tue Aug 08 17:41:13 2017 UTC
		Bits:       0x1e0fffff,               // 504365055
		Nonce:      0xb36f7,                  // 734967
	},
	Transactions: []*wire.MsgTx{&genesisCoinbaseTx},
}

// regTestGenesisHash is the hash of the first block in the block chain for the
// regression test network (genesis block).
var regTestGenesisHash = chainhash.Hash([chainhash.HashSize]byte{ // Make go vet happy.
	0xae, 0x5e, 0x7f, 0x94, 0xe1, 0x5d, 0xa9, 0xed,
	0x4e, 0x41, 0x04, 0x01, 0x3b, 0x2f, 0x3d, 0x82,
	0xa4, 0xde, 0x7c, 0x20, 0xad, 0x08, 0xcc, 0xae,
	0xb4, 0xae, 0xa2, 0x07, 0x59, 0x34, 0x23, 0x6d,
})

// regTestGenesisMerkleRoot is the hash of the first transaction in the genesis
// block for the regression test network.  It is the same as the merkle root for
// the main network.
var regTestGenesisMerkleRoot = chainhash.Hash([chainhash.HashSize]byte{ // Make go vet happy.
	0xb2, 0x8c, 0x4f, 0x1d, 0x46, 0xcf, 0x52, 0x86,
	0x2d, 0x12, 0x4c, 0x6e, 0x59, 0xdc, 0x53, 0x14,
	0x55, 0x46, 0xa4, 0x2f, 0x86, 0x45, 0xec, 0x6f,
	0xf6, 0x2c, 0x62, 0x3b, 0xd2, 0x5e, 0xd7, 0x23,
})

// regTestGenesisBlock defines the genesis block of the block chain which serves
// as the public transaction ledger for the regression test network.
var regTestGenesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    1,
		PrevBlock:  chainhash.Hash{},         // 0000000000000000000000000000000000000000000000000000000000000000
		MerkleRoot: regTestGenesisMerkleRoot, // 23d75ed23b622cf66fec45862fa446551453dc596e4c122d8652cf461d4f8cb2
		Timestamp:  time.Unix(1454124731, 0), // Sat Jan 30 03:32:11 2016 UTC
		Bits:       0x207fffff,               // 545259519
		Nonce:      2,
	},
	Transactions: []*wire.MsgTx{&genesisCoinbaseTxRegtest},
}

// testNet3GenesisHash is the hash of the first block in the block chain for the
// test network (version 3).
var testNet3GenesisHash = chainhash.Hash([chainhash.HashSize]byte{ // Make go vet happy.
	0x43, 0x49, 0x7f, 0xd7, 0xf8, 0x26, 0x95, 0x71,
	0x08, 0xf4, 0xa3, 0x0f, 0xd9, 0xce, 0xc3, 0xae,
	0xba, 0x79, 0x97, 0x20, 0x84, 0xe9, 0x0e, 0xad,
	0x01, 0xea, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00,
})

// testNet3GenesisMerkleRoot is the hash of the first transaction in the genesis
// block for the test network (version 3).  It is the same as the merkle root
// for the main network.
var testNet3GenesisMerkleRoot = genesisMerkleRoot

// testNet3GenesisBlock defines the genesis block of the block chain which
// serves as the public transaction ledger for the test network (version 3).
var testNet3GenesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    1,
		PrevBlock:  chainhash.Hash{},          // 0000000000000000000000000000000000000000000000000000000000000000
		MerkleRoot: testNet3GenesisMerkleRoot, // b1f0e93f6df55af4c23a0719ab33be2b8115e2b6127fc1d926a06c60a8b56bf2
		Timestamp:  time.Unix(1548018283, 0), // Sun Jan 20 21:04:43 2019 UTC
		Bits:       0x203fffff,                // 541065215
		Nonce:      2,
	},
	Transactions: []*wire.MsgTx{&genesisCoinbaseTxTestnet},
}

// simNetGenesisHash is the hash of the first block in the block chain for the
// simulation test network.
var simNetGenesisHash = regTestGenesisHash

// simNetGenesisMerkleRoot is the hash of the first transaction in the genesis
// block for the simulation test network.  It is the same as the merkle root for
// the main network.
var simNetGenesisMerkleRoot = regTestGenesisMerkleRoot

// simNetGenesisBlock defines the genesis block of the block chain which serves
// as the public transaction ledger for the simulation test network.
var simNetGenesisBlock = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version:    1,
		PrevBlock:  chainhash.Hash{},         // 0000000000000000000000000000000000000000000000000000000000000000
		MerkleRoot: simNetGenesisMerkleRoot,  // 23d75ed23b622cf66fec45862fa446551453dc596e4c122d8652cf461d4f8cb2
		Timestamp:  time.Unix(1454124731, 0), // Sat Jan 30 03:32:11 2016 UTC
		Bits:       0x207fffff,               // 545259519
		Nonce:      2,
	},
	Transactions: []*wire.MsgTx{&genesisCoinbaseTxRegtest},
}
